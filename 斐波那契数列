1. 普通递归算法
#include<iostream>
using namespace std;

int Fibonacci(int n)
{
	if (n == 1 || n == 2)
	{
		return 1;
	}
	else
	{
		return Fibonacci(n - 1) + Fibonacci(n - 2);
	}
}

int main()
{
	int n = 0;
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		cout<<Fibonacci(i)<<" ";
	}
	return 0;
}

2. 自底向上的非递归算法
#include<iostream>
using namespace std;

void feibo(int *b, int end)
{
	b[0] = 0;
	for (int i = 1; i <= end; i++)
	{
		if (i <= 2)
		{
			b[i] = 1;
		}
		else
		{
			b[i] = b[i - 1] + b[i - 2];
		}
	}
}
void printf(int *f, int end)
{
	for (int i = 1; i <= end; i++)
	{
		cout << f[i] << " ";
	}
}
int main()
{
	int n = 0;
	cin >> n;
	int *F = new int[n + 1];
	F[0] = 0;
	feibo(F, n);
	printf(F, n);
	return 0;
}
3. 自顶向下的递归算法
#include<iostream>
using namespace std;

void Fibonacci(int *b, int n)
{
	if (n == 1 || n == 2)
	{
		b[n] = 1;
	}
	else
	{
		if (b[n - 1] == -1)
		{
			Fibonacci(b,n - 1);
		}
		if (b[n - 2] == -1)
		{
			Fibonacci(b,n - 2);
		}
		b[n] = b[n - 1] + b[n - 2];
	}
}

void printf(int *f, int end)
{
	for (int i = 1; i <= end; i++)
	{
		cout << f[i] << " ";
	}
}
int main()
{
	int n = 0;
	cin >> n;

	int *F = new int[n + 1];
	F[0] = 0;
	for (int i = 1; i <= n; i++)
	{
		F[i] = -1;
	}

	Fibonacci(F, n);
	printf(F, n);
	return 0;
}

